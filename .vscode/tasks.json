{
  "version": "2.0.0",
  "tasks":
  [
    {
      "label": "Debug Build",
      "type": "shell",
      "command": "cmake --build Debug",
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      },
      "presentation": {
        "clear": true
      },
      "group": {
        "kind": "build"
      }
    },
    {
      "label": "Release Build",
      "type": "shell",
      "command": "cmake --build Release",
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      },
      "presentation": {
        "clear": true
      },
      "group": {
        "kind": "build"
      }
    },
    {
      "label": "Clean",
      "type": "shell",
      "command": [
        "cmake --build Debug --target clean &&",
        "cmake --build Release --target clean"
      ],
      "presentation": {
        "clear": true
      },
      "group": {
        "kind": "build"
      }
    },
    {
      "label": "Configure CMake",
      "type": "shell",
      "command": [
        "rm -rf Debug Release &&",
        "mkdir Debug Release &&",
        "cmake -S . -B Release -G Ninja -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_TOOLCHAIN_FILE=mingw-windows.cmake &&",
        "cmake -S . -B Debug -G Ninja -D CMAKE_BUILD_TYPE=DEBUG -D CMAKE_TOOLCHAIN_FILE=mingw-windows.cmake"
      ],
      "presentation": {
        "clear": true
      },
      "group": {
        "kind": "build"
      }
    },
    {
      "label": "Count Lines of C/C++ Code",
      "type": "shell",
      "command": [
        "echo -n \"Lines of C and C++: \" &&",
        "find -regex '.*\\.\\(hpp\\|cpp\\|c\\|h\\|hxx\\|cxx\\|cc\\|hh\\)$' |",
        "grep -E -i -v '^./(Debug|Release)' |",
        "xargs awk 'END{print NR}'"
      ],
      "presentation": {
        "clear": true
      }
    },
    {
      "label": "View File Assembly",
      "type": "shell",
      "command": [
        "[[ '${fileBasename}' == *.[ch]* ]] &&",
        "(gcc -fno-asynchronous-unwind-tables -fno-exceptions ",
        "-funroll-loops -fno-rtti -O -masm=intel -march=haswell -fverbose-asm ",
        "-S '${fileBasename}' -o '/tmp/${fileBasenameNoExtension}.s') &&",
        "code '/tmp/${fileBasenameNoExtension}.s' ||",
        "echo \"The current file is not a C or C++ file extension.\""
      ],
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      },
      "presentation": {
        "clear": true
      },
      "options": {
        "cwd": "${fileDirname}"
      }
    }
  ]
}